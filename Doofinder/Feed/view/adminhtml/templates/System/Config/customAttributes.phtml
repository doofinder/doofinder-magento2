<?php
// Workaround that adds compatibility for Magento versions < 2.4.0
if (!isset($escaper)) {
    $escaper = method_exists($block, 'escapeHtml') ? $block : \Magento\Framework\App\ObjectManager::getInstance()->get(\Magento\Framework\Escaper::class);
}

$_htmlId = $block->getHtmlId() ? $block->getHtmlId() : '_' . uniqid();
?>
<style>
    /* To make custom attributes table scrollable */
    .admin__df-custom-attributes-wrapper {
        max-height: 450px;
        overflow-y: auto;
    }
</style>
<div class="design_theme_ua_regexp" id="grid<?= $escaper->escapeHtml($_htmlId) ?>">
    <div class="admin__control-table-wrapper admin__df-custom-attributes-wrapper">
        <table class="admin__control-table">
            <thead>
                <tr>
                    <?php foreach ($block->getColumns() as $columnName => $column): ?>
                        <th><?= $escaper->escapeHtml($column['label']) ?></th>
                    <?php endforeach ?>
                </tr>
            </thead>
            <tbody id="addRow<?= $escaper->escapeHtml($_htmlId) ?>">
                <tr>
                    <td>
                        <strong class="productsorting_code input-text">Select All/None</strong>
                    </td>
                    <td>&nbsp;</td>
                    <td>
                        <input type="checkbox" id="toggle-custom-fields" class="input-text">
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <input type="hidden" name="<?= $escaper->escapeHtml($block->getElement()->getName()) ?>[__empty]" value="" />

    <script>
        require([
            'mage/template',
            'prototype'
        ], function (mageTemplate) {
            function toggleCustomAttributesCheckboxes(event) {
                const checkboxes = document.querySelectorAll('.admin__df-custom-attributes-wrapper input[type="checkbox"]:not(#toggle-custom-fields)');
                const checkboxStatus = event.target.checked;
                checkboxes.forEach(function(checkbox) {
                    checkbox.checked = checkboxStatus;
                });
            }

            const customFieldsToggler = document.getElementById('toggle-custom-fields');
            if (null !== customFieldsToggler) {
                customFieldsToggler.checked = false;
                customFieldsToggler.addEventListener('change', toggleCustomAttributesCheckboxes);
            }

            // create row creator
            window.arrayAttributes<?= $escaper->escapeJs($_htmlId) ?> = {
                // define row prototypeJS template
                template: mageTemplate(
                    '<tr id="<%- _id %>">'
                        <?php foreach ($block->getColumns() as $columnName => $column): ?>
                            + '<td>'
                            + '<?= $block->renderCellTemplate($columnName) // phpcs:ignore ?>'
                            + '<\/td>'
                        <?php endforeach ?>
                    +'<\/tr>'
                ),

                add: function(rowData, insertAfterId) {
                    // generate default template data
                    var templateValues = rowData;

                    // Insert new row after specified row or at the bottom
                    if (insertAfterId) {
                        Element.insert($(insertAfterId), {after: this.template(templateValues)});
                    } else {
                        Element.insert($('addRow<?= $escaper->escapeHtml($_htmlId) ?>'), {bottom: this.template(templateValues)});
                    }
                },
            }

            // add existing rows
            <?php
            foreach ($block->getArrayRows() as $_rowId => $_row) {
                if ($_row->getAttrId()) {
                    $_row->setAction($block->getUrl('catalog/product_attribute/edit/attribute_id/', ['attribute_id' => $_row->getAttrId()]));
                    $_row->setActionClass('viewed');
                } else {
                    $_row->setAction('');
                    $_row->setActionClass('hidden');
                }
                echo "arrayAttributes{$escaper->escapeJs($_htmlId)}.add(" . $_row->toJson() /* phpcs:ignore */ . ");\n";
            }
            ?>

            // Toggle the grid availability, if element is disabled (depending on scope)
            <?php if ($block->getElement()->getDisabled()):?>
                toggleValueElements({checked: true}, $('grid<?= $escaper->escapeHtml($_htmlId) ?>').parentNode);
            <?php endif ?>
        });
    </script>
</div>
